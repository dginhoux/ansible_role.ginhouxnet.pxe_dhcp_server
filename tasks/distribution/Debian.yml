---
- name: generate dhcp
  block:
    - name: "create configuration directoryr"
      ansible.builtin.file:
        state: directory
        dest: "{{ dhcp_config_dir }}"

    - name: "create sub-configuration directory"
      ansible.builtin.file:
        state: directory
        dest: "{{ dhcp_sub_config_dir }}"

    - name: "create main config file"
      ansible.builtin.template:
        src: dhcpd.conf.j2
        dest: "{{ dhcp_main_config4_file }}"

    - name: "create main config6 file"
      ansible.builtin.template:
        src: dhcpd6.conf.j2
        dest: "{{ dhcp_main_config6_file }}"

    - name: identify existing subnets and leases files for cleanup
      ansible.builtin.find:
        paths: "{{ dhcp_sub_config_dir }}"
        patterns: "*"
      register: subnets_leases_files_to_delete

    - name: cleanup subnets and leases files
      ansible.builtin.file:
        dest: "{{ item.path }}"
        state: absent
      with_items: "{{ subnets_leases_files_to_delete.files }}"

    - name: "create default debian file"
      ansible.builtin.template:
        src: debian_default.j2
        dest: "{{ dhcp_debian_default_file }}"

    - name: "create subnet config file"
      ansible.builtin.template:
        src: subnet4.conf.j2
        dest: "{{ dhcp_sub_config_dir }}/subnet4-{{ subnet.network }}.conf"
      loop: "{{ dhcp_subnets4 | flatten }}"
      loop_control:
        loop_var: subnet

    - name: "create empty leases config file"
      ansible.builtin.copy:
        content: |
          # Ansible managed
        dest: "{{ dhcp_sub_config_dir }}/subnet4-{{ subnet.network }}.leases"
      loop: "{{ dhcp_subnets4 | flatten }}"
      loop_control:
        loop_var: subnet

    - name: "create leases"
      ansible.builtin.template:
        src: subnet4.leases.j2
        dest: "{{ dhcp_sub_config_dir }}/subnet4-{{ lease_list.network }}.leases"
      loop: "{{ dhcp_leases4 }}"
      loop_control:
        loop_var: lease_list
  when: dhcp_configure_action == "generate"
  notify: dhcp_restart

- name: cleanup dhcp
  block:
    - name: identify leases files for cleanup
      ansible.builtin.find:
        paths: "{{ dhcp_sub_config_dir }}"
        patterns: "*.leases"
        recurse: "yes"
      register: leases_files_to_delete

    - name: cleanup leases files
      ansible.builtin.copy:
        dest: "{{ item.path }}"
        content: |
          # Ansible managed
      with_items: "{{ leases_files_to_delete.files }}"
  when: dhcp_configure_action == "cleanup"
  notify: dhcp_restart
